#!/usr/bin/env python
import collections
import colorsys
import errno
import fileinput
import math
import os
import re
import sys

def rgb_to_hsv(rgb):
    """Convert RGB-triplet to HSV-triplet."""
    rgbd = tuple([round(b, / 255., 4) for b in rgb])
    return colorsys.rgb_to_hsv(*rgbd)

def rgb_to_hex(rgb):
    """Return hexadecimal representation of RGB-triplet."""
    return ('%02x%02x%02x' % rgb).upper()

def hex_to_hsv(h):
    """Convert hexadecimal to HSV-triplet."""
    return rgb_to_hsv(hex_to_rgb(h))

def hex_to_rgb(s):
    """Convert hexadecimal to RGB-triplet."""
    v = int(s, 16)
    return (v >> 16, (v >> 8) & 0b11111111, v & 0b11111111)

def hsv_to_hex(hsv):
    """Return hexadecimal representation of HSV-triplet."""
    rgbd = colorsys.hsv_to_rgb(*hsv)
    # colorsys uses decimals; we convert to "bytes"
    rgb = tuple([int(round(b, * 255.)) for b in rgbd])
    return rgb_to_hex(rgb)

def clean_hex(h):
    """Return a version of `h` that is six characters in length; does not
    include a #-prefix; and is uppercase.
    
    """
    if h.startswith('#'):
        h = h[1:]

    if len(h) == 3:
        h = ''.join([2 * d for d in h])

    return h.upper()

def rotate_value(hsv, value=.5):
    """Rotate the value-decimal of `hsv` by `value`."""
    # HSL might be a better fit for this...
    (h, s, v) = hsv
    return (h, s, math.fmod(v + value, 1.))

color_re = re.compile('#[a-fA-F0-9]{3,6}')
def find_colors(haystack):
    """Scan `haystack` for (hexadecimal) color values and return a list of
    tuples (color, occurrences).
    
    """
    colors = collections.defaultdict(int)
    for color in color_re.findall(haystack):
        colors[clean_hex(color)] += 1
    return colors.items()

def sorted_colors(colors):
    """Sort `colors` (see `find_colors()`) by hue, saturation and value."""
    # this is not perfect. i couldn't come up with anything nice that would
    # allow me to sort the colors and then fold the 3D space into something
    # suitable for simple output.
    return sorted(colors, key=lambda ct: hex_to_hsv(ct[0]))

HTML_TEMPLATE = """
<!doctype html>
<meta charset="utf-8">
<html lang="zxx">
<head>
<title>magic!</title>
<style>
body { font-family: monospace; padding: 20px; }
h1 { margin-bottom: 1.2em; }
.color span { display: inline-block; padding: 5px 10px; }
.color .count { width: 30px; text-align: right; }
.color .value { width: 100px; text-align: center;}
</style>
</head>
<body>
%s
"""
def html_output(colors):
    """Print a neat HTML-version of `colors` to stdout."""
    t = ('<div class="color">'
         '<span class="count">%(occurrences)s</span>'
         '<span class="value" style="background: #%(c)s; color: #%(p)s">'
         '#%(c)s'
         '</span>'
         '</div>')
    lines = []
    lines.append('<h1>%s color(s) found</h1>' % len(colors))
    for color, occurrences in colors:
        lines.append(t % {
            'c': color,
            'p': hsv_to_hex(rotate_value(hex_to_hsv(color))),
            'occurrences': occurrences,
        })
    print HTML_TEMPLATE % '\n'.join(lines)

if __name__ == '__main__':
    try:
        haystack = '\n'.join(fileinput.input())
    except IOError, e:
        sys.stderr.write('error: %s\n' % e.strerror)
        sys.exit(1)

    colors = sorted_colors(find_colors(haystack))
    html_output(colors)
